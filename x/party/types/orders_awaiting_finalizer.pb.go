// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: partychain/party/orders_awaiting_finalizer.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrdersAwaitingFinalizer struct {
	Index            string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	NknAddress       string `protobuf:"bytes,2,opt,name=nknAddress,proto3" json:"nknAddress,omitempty"`
	WalletPrivateKey string `protobuf:"bytes,3,opt,name=walletPrivateKey,proto3" json:"walletPrivateKey,omitempty"`
	WalletPublicKey  string `protobuf:"bytes,4,opt,name=walletPublicKey,proto3" json:"walletPublicKey,omitempty"`
	ShippingAddress  string `protobuf:"bytes,5,opt,name=shippingAddress,proto3" json:"shippingAddress,omitempty"`
	RefundAddress    string `protobuf:"bytes,6,opt,name=refundAddress,proto3" json:"refundAddress,omitempty"`
	Amount           string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Chain            string `protobuf:"bytes,8,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *OrdersAwaitingFinalizer) Reset()         { *m = OrdersAwaitingFinalizer{} }
func (m *OrdersAwaitingFinalizer) String() string { return proto.CompactTextString(m) }
func (*OrdersAwaitingFinalizer) ProtoMessage()    {}
func (*OrdersAwaitingFinalizer) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbc36992577845a8, []int{0}
}
func (m *OrdersAwaitingFinalizer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrdersAwaitingFinalizer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrdersAwaitingFinalizer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrdersAwaitingFinalizer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersAwaitingFinalizer.Merge(m, src)
}
func (m *OrdersAwaitingFinalizer) XXX_Size() int {
	return m.Size()
}
func (m *OrdersAwaitingFinalizer) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersAwaitingFinalizer.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersAwaitingFinalizer proto.InternalMessageInfo

func (m *OrdersAwaitingFinalizer) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *OrdersAwaitingFinalizer) GetNknAddress() string {
	if m != nil {
		return m.NknAddress
	}
	return ""
}

func (m *OrdersAwaitingFinalizer) GetWalletPrivateKey() string {
	if m != nil {
		return m.WalletPrivateKey
	}
	return ""
}

func (m *OrdersAwaitingFinalizer) GetWalletPublicKey() string {
	if m != nil {
		return m.WalletPublicKey
	}
	return ""
}

func (m *OrdersAwaitingFinalizer) GetShippingAddress() string {
	if m != nil {
		return m.ShippingAddress
	}
	return ""
}

func (m *OrdersAwaitingFinalizer) GetRefundAddress() string {
	if m != nil {
		return m.RefundAddress
	}
	return ""
}

func (m *OrdersAwaitingFinalizer) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *OrdersAwaitingFinalizer) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func init() {
	proto.RegisterType((*OrdersAwaitingFinalizer)(nil), "teapartycrypto.partychain.party.OrdersAwaitingFinalizer")
}

func init() {
	proto.RegisterFile("partychain/party/orders_awaiting_finalizer.proto", fileDescriptor_dbc36992577845a8)
}

var fileDescriptor_dbc36992577845a8 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x9b, 0x6a, 0xab, 0x2e, 0x88, 0xb2, 0x88, 0xe6, 0xb4, 0x8a, 0x78, 0x28, 0x1e, 0x1a,
	0xd1, 0x27, 0xa8, 0x82, 0x17, 0x05, 0x8b, 0x78, 0xf2, 0x52, 0x36, 0xc9, 0x36, 0x19, 0x4c, 0x77,
	0x97, 0xcd, 0xc6, 0x36, 0x3e, 0x85, 0xef, 0xe0, 0xcb, 0x78, 0xec, 0xd1, 0xa3, 0x24, 0x2f, 0x22,
	0x99, 0x24, 0x58, 0xeb, 0x6d, 0xe6, 0x9f, 0x6f, 0xff, 0x65, 0xe6, 0x27, 0x17, 0x9a, 0x1b, 0x9b,
	0x07, 0x31, 0x07, 0xe9, 0x61, 0xe9, 0x29, 0x13, 0x0a, 0x93, 0x4e, 0xf8, 0x9c, 0x83, 0x05, 0x19,
	0x4d, 0xa6, 0x20, 0x79, 0x02, 0x6f, 0xc2, 0x0c, 0xb5, 0x51, 0x56, 0xd1, 0x63, 0x2b, 0x78, 0xfd,
	0xc8, 0xe4, 0xda, 0xaa, 0xe1, 0xaf, 0x41, 0x5d, 0x9e, 0x7e, 0x74, 0xc9, 0xd1, 0x03, 0x9a, 0x8c,
	0x1a, 0x8f, 0xdb, 0xd6, 0x82, 0x1e, 0x90, 0x1e, 0xc8, 0x50, 0x2c, 0x5c, 0xe7, 0xc4, 0x19, 0xec,
	0x3c, 0xd6, 0x0d, 0x65, 0x84, 0xc8, 0x17, 0x39, 0x0a, 0x43, 0x23, 0xd2, 0xd4, 0xed, 0xe2, 0x68,
	0x45, 0xa1, 0xe7, 0x64, 0x7f, 0xce, 0x93, 0x44, 0xd8, 0xb1, 0x81, 0x57, 0x6e, 0xc5, 0x9d, 0xc8,
	0xdd, 0x0d, 0xa4, 0xfe, 0xe9, 0x74, 0x40, 0xf6, 0x1a, 0x2d, 0xf3, 0x13, 0x08, 0x2a, 0x74, 0x13,
	0xd1, 0x75, 0xb9, 0x22, 0xd3, 0x18, 0xb4, 0x06, 0x19, 0xb5, 0x5f, 0xf7, 0x6a, 0x72, 0x4d, 0xa6,
	0x67, 0x64, 0xd7, 0x88, 0x69, 0x26, 0xc3, 0x96, 0xeb, 0x23, 0xf7, 0x57, 0xa4, 0x87, 0xa4, 0xcf,
	0x67, 0x2a, 0x93, 0xd6, 0xdd, 0xc2, 0x71, 0xd3, 0x55, 0x3b, 0xe3, 0x79, 0xdc, 0xed, 0x7a, 0x67,
	0x6c, 0xae, 0xef, 0x3f, 0x0b, 0xe6, 0x2c, 0x0b, 0xe6, 0x7c, 0x17, 0xcc, 0x79, 0x2f, 0x59, 0x67,
	0x59, 0xb2, 0xce, 0x57, 0xc9, 0x3a, 0xcf, 0x97, 0x11, 0xd8, 0x38, 0xf3, 0x87, 0x81, 0x9a, 0x79,
	0x4f, 0x82, 0x8f, 0xab, 0xa3, 0xde, 0xe0, 0xad, 0xbd, 0x95, 0xb0, 0x16, 0x4d, 0x5c, 0x36, 0xd7,
	0x22, 0xf5, 0xfb, 0x98, 0xcd, 0xd5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0xa9, 0xa1, 0x82,
	0xcf, 0x01, 0x00, 0x00,
}

func (m *OrdersAwaitingFinalizer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrdersAwaitingFinalizer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrdersAwaitingFinalizer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintOrdersAwaitingFinalizer(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintOrdersAwaitingFinalizer(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RefundAddress) > 0 {
		i -= len(m.RefundAddress)
		copy(dAtA[i:], m.RefundAddress)
		i = encodeVarintOrdersAwaitingFinalizer(dAtA, i, uint64(len(m.RefundAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ShippingAddress) > 0 {
		i -= len(m.ShippingAddress)
		copy(dAtA[i:], m.ShippingAddress)
		i = encodeVarintOrdersAwaitingFinalizer(dAtA, i, uint64(len(m.ShippingAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WalletPublicKey) > 0 {
		i -= len(m.WalletPublicKey)
		copy(dAtA[i:], m.WalletPublicKey)
		i = encodeVarintOrdersAwaitingFinalizer(dAtA, i, uint64(len(m.WalletPublicKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WalletPrivateKey) > 0 {
		i -= len(m.WalletPrivateKey)
		copy(dAtA[i:], m.WalletPrivateKey)
		i = encodeVarintOrdersAwaitingFinalizer(dAtA, i, uint64(len(m.WalletPrivateKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NknAddress) > 0 {
		i -= len(m.NknAddress)
		copy(dAtA[i:], m.NknAddress)
		i = encodeVarintOrdersAwaitingFinalizer(dAtA, i, uint64(len(m.NknAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintOrdersAwaitingFinalizer(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrdersAwaitingFinalizer(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrdersAwaitingFinalizer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrdersAwaitingFinalizer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovOrdersAwaitingFinalizer(uint64(l))
	}
	l = len(m.NknAddress)
	if l > 0 {
		n += 1 + l + sovOrdersAwaitingFinalizer(uint64(l))
	}
	l = len(m.WalletPrivateKey)
	if l > 0 {
		n += 1 + l + sovOrdersAwaitingFinalizer(uint64(l))
	}
	l = len(m.WalletPublicKey)
	if l > 0 {
		n += 1 + l + sovOrdersAwaitingFinalizer(uint64(l))
	}
	l = len(m.ShippingAddress)
	if l > 0 {
		n += 1 + l + sovOrdersAwaitingFinalizer(uint64(l))
	}
	l = len(m.RefundAddress)
	if l > 0 {
		n += 1 + l + sovOrdersAwaitingFinalizer(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovOrdersAwaitingFinalizer(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovOrdersAwaitingFinalizer(uint64(l))
	}
	return n
}

func sovOrdersAwaitingFinalizer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrdersAwaitingFinalizer(x uint64) (n int) {
	return sovOrdersAwaitingFinalizer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrdersAwaitingFinalizer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrdersAwaitingFinalizer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrdersAwaitingFinalizer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrdersAwaitingFinalizer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersAwaitingFinalizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NknAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersAwaitingFinalizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NknAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletPrivateKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersAwaitingFinalizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletPrivateKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletPublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersAwaitingFinalizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletPublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersAwaitingFinalizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersAwaitingFinalizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersAwaitingFinalizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersAwaitingFinalizer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrdersAwaitingFinalizer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrdersAwaitingFinalizer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrdersAwaitingFinalizer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrdersAwaitingFinalizer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrdersAwaitingFinalizer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrdersAwaitingFinalizer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrdersAwaitingFinalizer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrdersAwaitingFinalizer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrdersAwaitingFinalizer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrdersAwaitingFinalizer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrdersAwaitingFinalizer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrdersAwaitingFinalizer = fmt.Errorf("proto: unexpected end of group")
)
