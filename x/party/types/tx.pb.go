// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: partychain/party/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSubmitSell struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TradeAsset         string `protobuf:"bytes,2,opt,name=tradeAsset,proto3" json:"tradeAsset,omitempty"`
	Price              string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Currency           string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Amount             string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	SellerShippingAddr string `protobuf:"bytes,6,opt,name=sellerShippingAddr,proto3" json:"sellerShippingAddr,omitempty"`
	SellerNknAddr      string `protobuf:"bytes,7,opt,name=sellerNknAddr,proto3" json:"sellerNknAddr,omitempty"`
	RefundAddr         string `protobuf:"bytes,8,opt,name=refundAddr,proto3" json:"refundAddr,omitempty"`
}

func (m *MsgSubmitSell) Reset()         { *m = MsgSubmitSell{} }
func (m *MsgSubmitSell) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitSell) ProtoMessage()    {}
func (*MsgSubmitSell) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afc506a9c91efd9, []int{0}
}
func (m *MsgSubmitSell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitSell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitSell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitSell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitSell.Merge(m, src)
}
func (m *MsgSubmitSell) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitSell) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitSell.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitSell proto.InternalMessageInfo

func (m *MsgSubmitSell) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitSell) GetTradeAsset() string {
	if m != nil {
		return m.TradeAsset
	}
	return ""
}

func (m *MsgSubmitSell) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *MsgSubmitSell) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MsgSubmitSell) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *MsgSubmitSell) GetSellerShippingAddr() string {
	if m != nil {
		return m.SellerShippingAddr
	}
	return ""
}

func (m *MsgSubmitSell) GetSellerNknAddr() string {
	if m != nil {
		return m.SellerNknAddr
	}
	return ""
}

func (m *MsgSubmitSell) GetRefundAddr() string {
	if m != nil {
		return m.RefundAddr
	}
	return ""
}

type MsgSubmitSellResponse struct {
}

func (m *MsgSubmitSellResponse) Reset()         { *m = MsgSubmitSellResponse{} }
func (m *MsgSubmitSellResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitSellResponse) ProtoMessage()    {}
func (*MsgSubmitSellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afc506a9c91efd9, []int{1}
}
func (m *MsgSubmitSellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitSellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitSellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitSellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitSellResponse.Merge(m, src)
}
func (m *MsgSubmitSellResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitSellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitSellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitSellResponse proto.InternalMessageInfo

type MsgBuy struct {
	Creator              string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TxID                 string `protobuf:"bytes,2,opt,name=txID,proto3" json:"txID,omitempty"`
	BuyerShippingAddress string `protobuf:"bytes,3,opt,name=buyerShippingAddress,proto3" json:"buyerShippingAddress,omitempty"`
	BuyerNKNAddress      string `protobuf:"bytes,4,opt,name=buyerNKNAddress,proto3" json:"buyerNKNAddress,omitempty"`
	RefundAddress        string `protobuf:"bytes,5,opt,name=refundAddress,proto3" json:"refundAddress,omitempty"`
}

func (m *MsgBuy) Reset()         { *m = MsgBuy{} }
func (m *MsgBuy) String() string { return proto.CompactTextString(m) }
func (*MsgBuy) ProtoMessage()    {}
func (*MsgBuy) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afc506a9c91efd9, []int{2}
}
func (m *MsgBuy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuy.Merge(m, src)
}
func (m *MsgBuy) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuy proto.InternalMessageInfo

func (m *MsgBuy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBuy) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *MsgBuy) GetBuyerShippingAddress() string {
	if m != nil {
		return m.BuyerShippingAddress
	}
	return ""
}

func (m *MsgBuy) GetBuyerNKNAddress() string {
	if m != nil {
		return m.BuyerNKNAddress
	}
	return ""
}

func (m *MsgBuy) GetRefundAddress() string {
	if m != nil {
		return m.RefundAddress
	}
	return ""
}

type MsgBuyResponse struct {
}

func (m *MsgBuyResponse) Reset()         { *m = MsgBuyResponse{} }
func (m *MsgBuyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyResponse) ProtoMessage()    {}
func (*MsgBuyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afc506a9c91efd9, []int{3}
}
func (m *MsgBuyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyResponse.Merge(m, src)
}
func (m *MsgBuyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyResponse proto.InternalMessageInfo

type MsgCancel struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgCancel) Reset()         { *m = MsgCancel{} }
func (m *MsgCancel) String() string { return proto.CompactTextString(m) }
func (*MsgCancel) ProtoMessage()    {}
func (*MsgCancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afc506a9c91efd9, []int{4}
}
func (m *MsgCancel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancel.Merge(m, src)
}
func (m *MsgCancel) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancel proto.InternalMessageInfo

func (m *MsgCancel) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgCancelResponse struct {
}

func (m *MsgCancelResponse) Reset()         { *m = MsgCancelResponse{} }
func (m *MsgCancelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelResponse) ProtoMessage()    {}
func (*MsgCancelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afc506a9c91efd9, []int{5}
}
func (m *MsgCancelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelResponse.Merge(m, src)
}
func (m *MsgCancelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelResponse proto.InternalMessageInfo

type MsgAccountWatchOutcome struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TxID           string `protobuf:"bytes,2,opt,name=txID,proto3" json:"txID,omitempty"`
	Buyer          bool   `protobuf:"varint,3,opt,name=buyer,proto3" json:"buyer,omitempty"`
	PaymentOutcome string `protobuf:"bytes,4,opt,name=paymentOutcome,proto3" json:"paymentOutcome,omitempty"`
}

func (m *MsgAccountWatchOutcome) Reset()         { *m = MsgAccountWatchOutcome{} }
func (m *MsgAccountWatchOutcome) String() string { return proto.CompactTextString(m) }
func (*MsgAccountWatchOutcome) ProtoMessage()    {}
func (*MsgAccountWatchOutcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afc506a9c91efd9, []int{6}
}
func (m *MsgAccountWatchOutcome) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAccountWatchOutcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAccountWatchOutcome.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAccountWatchOutcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAccountWatchOutcome.Merge(m, src)
}
func (m *MsgAccountWatchOutcome) XXX_Size() int {
	return m.Size()
}
func (m *MsgAccountWatchOutcome) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAccountWatchOutcome.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAccountWatchOutcome proto.InternalMessageInfo

func (m *MsgAccountWatchOutcome) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAccountWatchOutcome) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *MsgAccountWatchOutcome) GetBuyer() bool {
	if m != nil {
		return m.Buyer
	}
	return false
}

func (m *MsgAccountWatchOutcome) GetPaymentOutcome() string {
	if m != nil {
		return m.PaymentOutcome
	}
	return ""
}

type MsgAccountWatchOutcomeResponse struct {
}

func (m *MsgAccountWatchOutcomeResponse) Reset()         { *m = MsgAccountWatchOutcomeResponse{} }
func (m *MsgAccountWatchOutcomeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAccountWatchOutcomeResponse) ProtoMessage()    {}
func (*MsgAccountWatchOutcomeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afc506a9c91efd9, []int{7}
}
func (m *MsgAccountWatchOutcomeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAccountWatchOutcomeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAccountWatchOutcomeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAccountWatchOutcomeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAccountWatchOutcomeResponse.Merge(m, src)
}
func (m *MsgAccountWatchOutcomeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAccountWatchOutcomeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAccountWatchOutcomeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAccountWatchOutcomeResponse proto.InternalMessageInfo

type MsgAccountWatchFailure struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TxID    string `protobuf:"bytes,2,opt,name=txID,proto3" json:"txID,omitempty"`
}

func (m *MsgAccountWatchFailure) Reset()         { *m = MsgAccountWatchFailure{} }
func (m *MsgAccountWatchFailure) String() string { return proto.CompactTextString(m) }
func (*MsgAccountWatchFailure) ProtoMessage()    {}
func (*MsgAccountWatchFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afc506a9c91efd9, []int{8}
}
func (m *MsgAccountWatchFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAccountWatchFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAccountWatchFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAccountWatchFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAccountWatchFailure.Merge(m, src)
}
func (m *MsgAccountWatchFailure) XXX_Size() int {
	return m.Size()
}
func (m *MsgAccountWatchFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAccountWatchFailure.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAccountWatchFailure proto.InternalMessageInfo

func (m *MsgAccountWatchFailure) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAccountWatchFailure) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

type MsgAccountWatchFailureResponse struct {
}

func (m *MsgAccountWatchFailureResponse) Reset()         { *m = MsgAccountWatchFailureResponse{} }
func (m *MsgAccountWatchFailureResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAccountWatchFailureResponse) ProtoMessage()    {}
func (*MsgAccountWatchFailureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afc506a9c91efd9, []int{9}
}
func (m *MsgAccountWatchFailureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAccountWatchFailureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAccountWatchFailureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAccountWatchFailureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAccountWatchFailureResponse.Merge(m, src)
}
func (m *MsgAccountWatchFailureResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAccountWatchFailureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAccountWatchFailureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAccountWatchFailureResponse proto.InternalMessageInfo

type MsgTransactionResult struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TxID    string `protobuf:"bytes,2,opt,name=txID,proto3" json:"txID,omitempty"`
	Outcome string `protobuf:"bytes,3,opt,name=outcome,proto3" json:"outcome,omitempty"`
}

func (m *MsgTransactionResult) Reset()         { *m = MsgTransactionResult{} }
func (m *MsgTransactionResult) String() string { return proto.CompactTextString(m) }
func (*MsgTransactionResult) ProtoMessage()    {}
func (*MsgTransactionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afc506a9c91efd9, []int{10}
}
func (m *MsgTransactionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransactionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransactionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransactionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransactionResult.Merge(m, src)
}
func (m *MsgTransactionResult) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransactionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransactionResult.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransactionResult proto.InternalMessageInfo

func (m *MsgTransactionResult) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransactionResult) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *MsgTransactionResult) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

type MsgTransactionResultResponse struct {
}

func (m *MsgTransactionResultResponse) Reset()         { *m = MsgTransactionResultResponse{} }
func (m *MsgTransactionResultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransactionResultResponse) ProtoMessage()    {}
func (*MsgTransactionResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afc506a9c91efd9, []int{11}
}
func (m *MsgTransactionResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransactionResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransactionResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransactionResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransactionResultResponse.Merge(m, src)
}
func (m *MsgTransactionResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransactionResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransactionResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransactionResultResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSubmitSell)(nil), "teapartycrypto.partychain.party.MsgSubmitSell")
	proto.RegisterType((*MsgSubmitSellResponse)(nil), "teapartycrypto.partychain.party.MsgSubmitSellResponse")
	proto.RegisterType((*MsgBuy)(nil), "teapartycrypto.partychain.party.MsgBuy")
	proto.RegisterType((*MsgBuyResponse)(nil), "teapartycrypto.partychain.party.MsgBuyResponse")
	proto.RegisterType((*MsgCancel)(nil), "teapartycrypto.partychain.party.MsgCancel")
	proto.RegisterType((*MsgCancelResponse)(nil), "teapartycrypto.partychain.party.MsgCancelResponse")
	proto.RegisterType((*MsgAccountWatchOutcome)(nil), "teapartycrypto.partychain.party.MsgAccountWatchOutcome")
	proto.RegisterType((*MsgAccountWatchOutcomeResponse)(nil), "teapartycrypto.partychain.party.MsgAccountWatchOutcomeResponse")
	proto.RegisterType((*MsgAccountWatchFailure)(nil), "teapartycrypto.partychain.party.MsgAccountWatchFailure")
	proto.RegisterType((*MsgAccountWatchFailureResponse)(nil), "teapartycrypto.partychain.party.MsgAccountWatchFailureResponse")
	proto.RegisterType((*MsgTransactionResult)(nil), "teapartycrypto.partychain.party.MsgTransactionResult")
	proto.RegisterType((*MsgTransactionResultResponse)(nil), "teapartycrypto.partychain.party.MsgTransactionResultResponse")
}

func init() { proto.RegisterFile("partychain/party/tx.proto", fileDescriptor_8afc506a9c91efd9) }

var fileDescriptor_8afc506a9c91efd9 = []byte{
	// 618 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xae, 0xdb, 0x26, 0x6d, 0x47, 0x6a, 0xdf, 0xb7, 0xdb, 0x50, 0x8c, 0x85, 0x4c, 0x65, 0xf1,
	0x51, 0x71, 0x70, 0xa4, 0x20, 0xe0, 0x84, 0x50, 0x53, 0x54, 0x09, 0x81, 0x03, 0x4a, 0x2a, 0x21,
	0x71, 0x00, 0x6d, 0x36, 0x8b, 0x63, 0xe1, 0xd8, 0xd6, 0xee, 0x5a, 0x8a, 0xef, 0x5c, 0x7a, 0x82,
	0xdf, 0xc3, 0x2f, 0xe0, 0xd8, 0x23, 0x47, 0x94, 0xfc, 0x07, 0xce, 0xc8, 0xeb, 0x8f, 0x7c, 0x99,
	0x62, 0xf7, 0xb6, 0x33, 0xf3, 0xcc, 0xcc, 0x33, 0xcf, 0xce, 0x6a, 0xe1, 0x56, 0x80, 0x99, 0x88,
	0xc8, 0x10, 0x3b, 0x5e, 0x53, 0x1e, 0x9b, 0x62, 0x6c, 0x06, 0xcc, 0x17, 0x3e, 0xba, 0x23, 0x28,
	0x4e, 0xa2, 0x2c, 0x0a, 0x84, 0x6f, 0xce, 0x90, 0xc9, 0xd1, 0xb8, 0x58, 0x87, 0x5d, 0x8b, 0xdb,
	0xbd, 0xb0, 0x3f, 0x72, 0x44, 0x8f, 0xba, 0x2e, 0x52, 0x61, 0x8b, 0x30, 0x8a, 0x85, 0xcf, 0x54,
	0xe5, 0x48, 0x39, 0xde, 0xe9, 0x66, 0x26, 0xd2, 0x01, 0x04, 0xc3, 0x03, 0x7a, 0xc2, 0x39, 0x15,
	0xea, 0xba, 0x0c, 0xce, 0x79, 0x50, 0x03, 0x6a, 0x01, 0x73, 0x08, 0x55, 0x37, 0x64, 0x28, 0x31,
	0x90, 0x06, 0xdb, 0x24, 0x64, 0x8c, 0x7a, 0x24, 0x52, 0x37, 0x65, 0x20, 0xb7, 0xd1, 0x21, 0xd4,
	0xf1, 0xc8, 0x0f, 0x3d, 0xa1, 0xd6, 0x64, 0x24, 0xb5, 0x90, 0x09, 0x88, 0x53, 0xd7, 0xa5, 0xac,
	0x37, 0x74, 0x82, 0xc0, 0xf1, 0xec, 0x93, 0xc1, 0x80, 0xa9, 0x75, 0x89, 0x29, 0x88, 0xa0, 0xbb,
	0xb0, 0x9b, 0x78, 0x3b, 0x9f, 0x3d, 0x09, 0xdd, 0x92, 0xd0, 0x45, 0x67, 0xcc, 0x9f, 0xd1, 0x4f,
	0xa1, 0x37, 0x90, 0x90, 0xed, 0x84, 0xff, 0xcc, 0x63, 0xdc, 0x84, 0x1b, 0x0b, 0x52, 0x74, 0x29,
	0x0f, 0x7c, 0x8f, 0x53, 0xe3, 0xbb, 0x02, 0x75, 0x8b, 0xdb, 0xed, 0x30, 0xba, 0x42, 0x1d, 0x04,
	0x9b, 0x62, 0xfc, 0xf2, 0x45, 0xaa, 0x8b, 0x3c, 0xa3, 0x16, 0x34, 0xfa, 0x61, 0xb4, 0x48, 0x96,
	0x72, 0x9e, 0x0a, 0x54, 0x18, 0x43, 0xc7, 0xf0, 0x9f, 0xf4, 0x77, 0x5e, 0x75, 0x32, 0x78, 0x22,
	0xdb, 0xb2, 0x3b, 0x9e, 0x7a, 0xc6, 0x3e, 0xc6, 0x25, 0x22, 0x2e, 0x3a, 0x8d, 0xff, 0x61, 0x2f,
	0xe1, 0x9e, 0x8f, 0x73, 0x0f, 0x76, 0x2c, 0x6e, 0x9f, 0x62, 0x8f, 0xd0, 0x2b, 0xae, 0xdb, 0x38,
	0x80, 0xfd, 0x1c, 0x96, 0xe7, 0x7e, 0x51, 0xe0, 0xd0, 0xe2, 0xf6, 0x09, 0x21, 0xf1, 0x45, 0xbd,
	0xc3, 0x82, 0x0c, 0xdf, 0x84, 0x82, 0xf8, 0x23, 0x5a, 0x51, 0x9a, 0x06, 0xd4, 0xe4, 0x3c, 0x52,
	0x8b, 0xed, 0x6e, 0x62, 0xa0, 0xfb, 0xb0, 0x17, 0xe0, 0x68, 0x44, 0x3d, 0x91, 0x56, 0x4d, 0x67,
	0x5f, 0xf2, 0x1a, 0x47, 0xa0, 0x17, 0xb3, 0xc8, 0x89, 0x9e, 0xad, 0xf0, 0x3c, 0xc3, 0x8e, 0x1b,
	0xb2, 0x8a, 0x3c, 0x0b, 0x3a, 0xa5, 0x75, 0xf2, 0x4e, 0x1f, 0xa0, 0x61, 0x71, 0xfb, 0x9c, 0x61,
	0x8f, 0x63, 0x22, 0x1c, 0xdf, 0xeb, 0x52, 0x1e, 0xba, 0xa2, 0xa2, 0x1e, 0x2a, 0x6c, 0xf9, 0xe9,
	0xc8, 0xc9, 0x76, 0x64, 0xa6, 0xa1, 0xc3, 0xed, 0xa2, 0xfa, 0x59, 0xff, 0xd6, 0xef, 0x1a, 0x6c,
	0x58, 0xdc, 0x46, 0x02, 0x60, 0xee, 0x19, 0x9b, 0xe6, 0x3f, 0x9e, 0xbe, 0xb9, 0xb0, 0xeb, 0xda,
	0x93, 0x6a, 0xf8, 0xac, 0x3b, 0xfa, 0x08, 0x1b, 0xf1, 0xbb, 0x78, 0x50, 0x26, 0xbd, 0x1d, 0x46,
	0x5a, 0xb3, 0x24, 0x30, 0x6f, 0x30, 0x84, 0x7a, 0xba, 0xaa, 0x0f, 0xcb, 0xa4, 0x26, 0x58, 0xad,
	0x55, 0x1e, 0x9b, 0x77, 0xfa, 0xaa, 0xc0, 0x41, 0xd1, 0x62, 0x3f, 0x2d, 0x53, 0xab, 0x20, 0x51,
	0x7b, 0x7e, 0xcd, 0xc4, 0xbf, 0x32, 0xca, 0x56, 0xb8, 0x32, 0xa3, 0x34, 0xb1, 0x3a, 0xa3, 0xa5,
	0x65, 0x47, 0x17, 0x0a, 0xec, 0xaf, 0xae, 0xfa, 0xe3, 0x32, 0x65, 0x57, 0xd2, 0xb4, 0x67, 0xd7,
	0x4a, 0xcb, 0xb8, 0xb4, 0x5f, 0xff, 0x98, 0xe8, 0xca, 0xe5, 0x44, 0x57, 0x7e, 0x4d, 0x74, 0xe5,
	0xdb, 0x54, 0x5f, 0xbb, 0x9c, 0xea, 0x6b, 0x3f, 0xa7, 0xfa, 0xda, 0xfb, 0x96, 0xed, 0x88, 0x61,
	0xd8, 0x37, 0x89, 0x3f, 0x6a, 0x9e, 0x53, 0xfc, 0x36, 0xae, 0x75, 0x2a, 0x5b, 0x34, 0xe7, 0xfe,
	0xca, 0x71, 0xf6, 0x5b, 0x46, 0x01, 0xe5, 0xfd, 0xba, 0xfc, 0x31, 0x1f, 0xfd, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x2c, 0x52, 0x41, 0x6e, 0x4e, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SubmitSell(ctx context.Context, in *MsgSubmitSell, opts ...grpc.CallOption) (*MsgSubmitSellResponse, error)
	Buy(ctx context.Context, in *MsgBuy, opts ...grpc.CallOption) (*MsgBuyResponse, error)
	Cancel(ctx context.Context, in *MsgCancel, opts ...grpc.CallOption) (*MsgCancelResponse, error)
	AccountWatchOutcome(ctx context.Context, in *MsgAccountWatchOutcome, opts ...grpc.CallOption) (*MsgAccountWatchOutcomeResponse, error)
	AccountWatchFailure(ctx context.Context, in *MsgAccountWatchFailure, opts ...grpc.CallOption) (*MsgAccountWatchFailureResponse, error)
	TransactionResult(ctx context.Context, in *MsgTransactionResult, opts ...grpc.CallOption) (*MsgTransactionResultResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SubmitSell(ctx context.Context, in *MsgSubmitSell, opts ...grpc.CallOption) (*MsgSubmitSellResponse, error) {
	out := new(MsgSubmitSellResponse)
	err := c.cc.Invoke(ctx, "/teapartycrypto.partychain.party.Msg/SubmitSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Buy(ctx context.Context, in *MsgBuy, opts ...grpc.CallOption) (*MsgBuyResponse, error) {
	out := new(MsgBuyResponse)
	err := c.cc.Invoke(ctx, "/teapartycrypto.partychain.party.Msg/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Cancel(ctx context.Context, in *MsgCancel, opts ...grpc.CallOption) (*MsgCancelResponse, error) {
	out := new(MsgCancelResponse)
	err := c.cc.Invoke(ctx, "/teapartycrypto.partychain.party.Msg/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AccountWatchOutcome(ctx context.Context, in *MsgAccountWatchOutcome, opts ...grpc.CallOption) (*MsgAccountWatchOutcomeResponse, error) {
	out := new(MsgAccountWatchOutcomeResponse)
	err := c.cc.Invoke(ctx, "/teapartycrypto.partychain.party.Msg/AccountWatchOutcome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AccountWatchFailure(ctx context.Context, in *MsgAccountWatchFailure, opts ...grpc.CallOption) (*MsgAccountWatchFailureResponse, error) {
	out := new(MsgAccountWatchFailureResponse)
	err := c.cc.Invoke(ctx, "/teapartycrypto.partychain.party.Msg/AccountWatchFailure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransactionResult(ctx context.Context, in *MsgTransactionResult, opts ...grpc.CallOption) (*MsgTransactionResultResponse, error) {
	out := new(MsgTransactionResultResponse)
	err := c.cc.Invoke(ctx, "/teapartycrypto.partychain.party.Msg/TransactionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SubmitSell(context.Context, *MsgSubmitSell) (*MsgSubmitSellResponse, error)
	Buy(context.Context, *MsgBuy) (*MsgBuyResponse, error)
	Cancel(context.Context, *MsgCancel) (*MsgCancelResponse, error)
	AccountWatchOutcome(context.Context, *MsgAccountWatchOutcome) (*MsgAccountWatchOutcomeResponse, error)
	AccountWatchFailure(context.Context, *MsgAccountWatchFailure) (*MsgAccountWatchFailureResponse, error)
	TransactionResult(context.Context, *MsgTransactionResult) (*MsgTransactionResultResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SubmitSell(ctx context.Context, req *MsgSubmitSell) (*MsgSubmitSellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSell not implemented")
}
func (*UnimplementedMsgServer) Buy(ctx context.Context, req *MsgBuy) (*MsgBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (*UnimplementedMsgServer) Cancel(ctx context.Context, req *MsgCancel) (*MsgCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (*UnimplementedMsgServer) AccountWatchOutcome(ctx context.Context, req *MsgAccountWatchOutcome) (*MsgAccountWatchOutcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountWatchOutcome not implemented")
}
func (*UnimplementedMsgServer) AccountWatchFailure(ctx context.Context, req *MsgAccountWatchFailure) (*MsgAccountWatchFailureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountWatchFailure not implemented")
}
func (*UnimplementedMsgServer) TransactionResult(ctx context.Context, req *MsgTransactionResult) (*MsgTransactionResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionResult not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SubmitSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitSell)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teapartycrypto.partychain.party.Msg/SubmitSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitSell(ctx, req.(*MsgSubmitSell))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teapartycrypto.partychain.party.Msg/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Buy(ctx, req.(*MsgBuy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teapartycrypto.partychain.party.Msg/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Cancel(ctx, req.(*MsgCancel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AccountWatchOutcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAccountWatchOutcome)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AccountWatchOutcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teapartycrypto.partychain.party.Msg/AccountWatchOutcome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AccountWatchOutcome(ctx, req.(*MsgAccountWatchOutcome))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AccountWatchFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAccountWatchFailure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AccountWatchFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teapartycrypto.partychain.party.Msg/AccountWatchFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AccountWatchFailure(ctx, req.(*MsgAccountWatchFailure))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransactionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransactionResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransactionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teapartycrypto.partychain.party.Msg/TransactionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransactionResult(ctx, req.(*MsgTransactionResult))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "teapartycrypto.partychain.party.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitSell",
			Handler:    _Msg_SubmitSell_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _Msg_Buy_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Msg_Cancel_Handler,
		},
		{
			MethodName: "AccountWatchOutcome",
			Handler:    _Msg_AccountWatchOutcome_Handler,
		},
		{
			MethodName: "AccountWatchFailure",
			Handler:    _Msg_AccountWatchFailure_Handler,
		},
		{
			MethodName: "TransactionResult",
			Handler:    _Msg_TransactionResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "partychain/party/tx.proto",
}

func (m *MsgSubmitSell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitSell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitSell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefundAddr) > 0 {
		i -= len(m.RefundAddr)
		copy(dAtA[i:], m.RefundAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefundAddr)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SellerNknAddr) > 0 {
		i -= len(m.SellerNknAddr)
		copy(dAtA[i:], m.SellerNknAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerNknAddr)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SellerShippingAddr) > 0 {
		i -= len(m.SellerShippingAddr)
		copy(dAtA[i:], m.SellerShippingAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerShippingAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradeAsset) > 0 {
		i -= len(m.TradeAsset)
		copy(dAtA[i:], m.TradeAsset)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeAsset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitSellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitSellResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitSellResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefundAddress) > 0 {
		i -= len(m.RefundAddress)
		copy(dAtA[i:], m.RefundAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefundAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuyerNKNAddress) > 0 {
		i -= len(m.BuyerNKNAddress)
		copy(dAtA[i:], m.BuyerNKNAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerNKNAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BuyerShippingAddress) > 0 {
		i -= len(m.BuyerShippingAddress)
		copy(dAtA[i:], m.BuyerShippingAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerShippingAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAccountWatchOutcome) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAccountWatchOutcome) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAccountWatchOutcome) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentOutcome) > 0 {
		i -= len(m.PaymentOutcome)
		copy(dAtA[i:], m.PaymentOutcome)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PaymentOutcome)))
		i--
		dAtA[i] = 0x22
	}
	if m.Buyer {
		i--
		if m.Buyer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAccountWatchOutcomeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAccountWatchOutcomeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAccountWatchOutcomeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAccountWatchFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAccountWatchFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAccountWatchFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAccountWatchFailureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAccountWatchFailureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAccountWatchFailureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransactionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransactionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransactionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Outcome) > 0 {
		i -= len(m.Outcome)
		copy(dAtA[i:], m.Outcome)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Outcome)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransactionResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransactionResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransactionResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSubmitSell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradeAsset)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerShippingAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerNknAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RefundAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitSellResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBuy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerShippingAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerNKNAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RefundAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBuyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAccountWatchOutcome) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Buyer {
		n += 2
	}
	l = len(m.PaymentOutcome)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAccountWatchOutcomeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAccountWatchFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAccountWatchFailureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransactionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Outcome)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransactionResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSubmitSell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitSell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitSell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerShippingAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerShippingAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerNknAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerNknAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitSellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitSellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitSellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerShippingAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerShippingAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerNKNAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerNKNAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAccountWatchOutcome) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAccountWatchOutcome: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAccountWatchOutcome: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buyer = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentOutcome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentOutcome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAccountWatchOutcomeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAccountWatchOutcomeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAccountWatchOutcomeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAccountWatchFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAccountWatchFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAccountWatchFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAccountWatchFailureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAccountWatchFailureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAccountWatchFailureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransactionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransactionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransactionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outcome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransactionResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransactionResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransactionResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
