// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: partychain/party/trade_orders.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TradeOrders struct {
	Index              string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	TradeAsset         string `protobuf:"bytes,2,opt,name=tradeAsset,proto3" json:"tradeAsset,omitempty"`
	Price              string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Currency           string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Amount             string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	SellerShippingAddr string `protobuf:"bytes,6,opt,name=sellerShippingAddr,proto3" json:"sellerShippingAddr,omitempty"`
	SellerNknAddr      string `protobuf:"bytes,7,opt,name=sellerNknAddr,proto3" json:"sellerNknAddr,omitempty"`
	RefundAddr         string `protobuf:"bytes,8,opt,name=refundAddr,proto3" json:"refundAddr,omitempty"`
}

func (m *TradeOrders) Reset()         { *m = TradeOrders{} }
func (m *TradeOrders) String() string { return proto.CompactTextString(m) }
func (*TradeOrders) ProtoMessage()    {}
func (*TradeOrders) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7daabc8aece6de8, []int{0}
}
func (m *TradeOrders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeOrders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeOrders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeOrders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeOrders.Merge(m, src)
}
func (m *TradeOrders) XXX_Size() int {
	return m.Size()
}
func (m *TradeOrders) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeOrders.DiscardUnknown(m)
}

var xxx_messageInfo_TradeOrders proto.InternalMessageInfo

func (m *TradeOrders) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *TradeOrders) GetTradeAsset() string {
	if m != nil {
		return m.TradeAsset
	}
	return ""
}

func (m *TradeOrders) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *TradeOrders) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *TradeOrders) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *TradeOrders) GetSellerShippingAddr() string {
	if m != nil {
		return m.SellerShippingAddr
	}
	return ""
}

func (m *TradeOrders) GetSellerNknAddr() string {
	if m != nil {
		return m.SellerNknAddr
	}
	return ""
}

func (m *TradeOrders) GetRefundAddr() string {
	if m != nil {
		return m.RefundAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*TradeOrders)(nil), "teapartycrypto.partychain.party.TradeOrders")
}

func init() {
	proto.RegisterFile("partychain/party/trade_orders.proto", fileDescriptor_c7daabc8aece6de8)
}

var fileDescriptor_c7daabc8aece6de8 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x3d, 0x4e, 0xc3, 0x30,
	0x14, 0x6e, 0x0a, 0x2d, 0xc5, 0x88, 0xc5, 0x42, 0xc8, 0x62, 0x30, 0x08, 0x18, 0x98, 0x12, 0x09,
	0x4e, 0x50, 0x58, 0x11, 0x20, 0xe8, 0xc4, 0x82, 0xdc, 0xf8, 0xd1, 0x5a, 0xb4, 0xb6, 0xf5, 0xe2,
	0x48, 0xcd, 0xcc, 0x05, 0x38, 0x16, 0x63, 0x47, 0x46, 0x94, 0x5c, 0x04, 0xe5, 0x19, 0x68, 0x91,
	0xd8, 0xde, 0xf7, 0x67, 0x7d, 0xfa, 0xcc, 0x4e, 0xbc, 0xc2, 0x50, 0xe5, 0x53, 0x65, 0x6c, 0x46,
	0x67, 0x16, 0x50, 0x69, 0x78, 0x72, 0xa8, 0x01, 0x8b, 0xd4, 0xa3, 0x0b, 0x8e, 0x1f, 0x06, 0x50,
	0xd1, 0x87, 0x95, 0x0f, 0x2e, 0x5d, 0x65, 0xe2, 0x79, 0xfc, 0xda, 0x65, 0x3b, 0xa3, 0x36, 0x77,
	0x4b, 0x31, 0xbe, 0xc7, 0x7a, 0xc6, 0x6a, 0x58, 0x88, 0xe4, 0x28, 0x39, 0xdb, 0xbe, 0x8f, 0x80,
	0x4b, 0xc6, 0xe8, 0xf1, 0x61, 0x51, 0x40, 0x10, 0x5d, 0x92, 0xd6, 0x98, 0x36, 0xe5, 0xd1, 0xe4,
	0x20, 0x36, 0x62, 0x8a, 0x00, 0x3f, 0x60, 0x83, 0xbc, 0x44, 0x04, 0x9b, 0x57, 0x62, 0x93, 0x84,
	0x5f, 0xcc, 0xf7, 0x59, 0x5f, 0xcd, 0x5d, 0x69, 0x83, 0xe8, 0x91, 0xf2, 0x8d, 0x78, 0xca, 0x78,
	0x01, 0xb3, 0x19, 0xe0, 0xc3, 0xd4, 0x78, 0x6f, 0xec, 0x64, 0xa8, 0x35, 0x8a, 0x3e, 0x79, 0xfe,
	0x51, 0xf8, 0x29, 0xdb, 0x8d, 0xec, 0xcd, 0x8b, 0x25, 0xeb, 0x16, 0x59, 0xff, 0x92, 0x6d, 0x7f,
	0x84, 0xe7, 0xd2, 0x6a, 0xb2, 0x0c, 0x62, 0xff, 0x15, 0x73, 0x79, 0xfd, 0x5e, 0xcb, 0x64, 0x59,
	0xcb, 0xe4, 0xb3, 0x96, 0xc9, 0x5b, 0x23, 0x3b, 0xcb, 0x46, 0x76, 0x3e, 0x1a, 0xd9, 0x79, 0x3c,
	0x9f, 0x98, 0x30, 0x2d, 0xc7, 0x69, 0xee, 0xe6, 0xd9, 0x08, 0xd4, 0x5d, 0x3b, 0xda, 0x15, 0x6d,
	0x99, 0xad, 0xed, 0xbf, 0xf8, 0xf9, 0x81, 0xca, 0x43, 0x31, 0xee, 0xd3, 0xf6, 0x17, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x74, 0x07, 0xda, 0xb6, 0xa2, 0x01, 0x00, 0x00,
}

func (m *TradeOrders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeOrders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeOrders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefundAddr) > 0 {
		i -= len(m.RefundAddr)
		copy(dAtA[i:], m.RefundAddr)
		i = encodeVarintTradeOrders(dAtA, i, uint64(len(m.RefundAddr)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SellerNknAddr) > 0 {
		i -= len(m.SellerNknAddr)
		copy(dAtA[i:], m.SellerNknAddr)
		i = encodeVarintTradeOrders(dAtA, i, uint64(len(m.SellerNknAddr)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SellerShippingAddr) > 0 {
		i -= len(m.SellerShippingAddr)
		copy(dAtA[i:], m.SellerShippingAddr)
		i = encodeVarintTradeOrders(dAtA, i, uint64(len(m.SellerShippingAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTradeOrders(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintTradeOrders(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintTradeOrders(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradeAsset) > 0 {
		i -= len(m.TradeAsset)
		copy(dAtA[i:], m.TradeAsset)
		i = encodeVarintTradeOrders(dAtA, i, uint64(len(m.TradeAsset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTradeOrders(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTradeOrders(dAtA []byte, offset int, v uint64) int {
	offset -= sovTradeOrders(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TradeOrders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTradeOrders(uint64(l))
	}
	l = len(m.TradeAsset)
	if l > 0 {
		n += 1 + l + sovTradeOrders(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovTradeOrders(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTradeOrders(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTradeOrders(uint64(l))
	}
	l = len(m.SellerShippingAddr)
	if l > 0 {
		n += 1 + l + sovTradeOrders(uint64(l))
	}
	l = len(m.SellerNknAddr)
	if l > 0 {
		n += 1 + l + sovTradeOrders(uint64(l))
	}
	l = len(m.RefundAddr)
	if l > 0 {
		n += 1 + l + sovTradeOrders(uint64(l))
	}
	return n
}

func sovTradeOrders(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTradeOrders(x uint64) (n int) {
	return sovTradeOrders(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TradeOrders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradeOrders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeOrders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeOrders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerShippingAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerShippingAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerNknAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerNknAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradeOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradeOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradeOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradeOrders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradeOrders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTradeOrders(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTradeOrders
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradeOrders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradeOrders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTradeOrders
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTradeOrders
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTradeOrders
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTradeOrders        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTradeOrders          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTradeOrders = fmt.Errorf("proto: unexpected end of group")
)
